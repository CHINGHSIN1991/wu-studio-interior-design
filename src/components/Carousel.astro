---
import { Image } from "astro:assets"
import type { CarouselItem } from "../../types"

const { items } = Astro.props as { items: CarouselItem[] };
---

<div class="carousel-container">
  <div class="carousel">
    {
      items.map((item: CarouselItem, index: number) => {
        return (
          <div class="carousel-item" style={index === 0 ? "opacity: 1;" : "opacity: 0;"}>
            {item.data.link ? (
              <a href={`projects/${item.data.link}`}>
                <Image
                  src={item.data.image} 
                  alt={item.data.title}
                  width="1200"
                  height="600"
                  format="avif"
                  fit="cover"
                  quality={80}
                />
              </a>
            ) : (
              <Image
                src={item.data.image} 
                alt={item.data.title}
                width="1200"
                height="600"
                format="avif"
                fit="cover"
                quality={80}
              />
            )}
            <div class="carousel-caption">
              <h2>{item.data.title}</h2>
              <p>{item.data.description}</p>
            </div>
          </div>
        )
      })
    }
    <button class="carousel-btn prev">❮</button>
    <button class="carousel-btn next">❯</button>
  </div>
</div>

<style>
  .carousel-container {
    width: 100vw;
    height: 100vh;
    margin: 0;
    position: relative;
    overflow: hidden;
  }

  .carousel {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .carousel-item {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.8s ease-in-out;
  }

  .carousel-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .carousel-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 2rem;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
    color: white;
  }

  .carousel-caption h2 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }

  .carousel-caption p {
    font-size: 1.2rem;
  }

  .carousel-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.3);
    color: white;
    border: none;
    padding: 2rem 1.5rem;
    cursor: pointer;
    font-size: 1.5rem;
    transition: background 0.3s ease;
    z-index: 2;
  }

  .carousel-btn:hover {
    background: rgba(0, 0, 0, 0.6);
  }

  .prev {
    left: 2rem;
  }

  .next {
    right: 2rem;
  }
</style>

<script>
  function setupCarousel() {
    const items = document.querySelectorAll('.carousel-item');
    const prevBtn = document.querySelector('.prev');
    const nextBtn = document.querySelector('.next');
    let currentIndex = 0;

    function showSlide(index: number) {
      items.forEach((item) => {
        (item as HTMLElement).style.opacity = '0';
        (item as HTMLElement).style.zIndex = '0';
      });
      (items[index] as HTMLElement).style.opacity = '1';
      (items[index] as HTMLElement).style.zIndex = '1';
    }

    function nextSlide() {
      console.log('trigger nextSlide');
      currentIndex = (currentIndex + 1) % items.length;
      showSlide(currentIndex);
    }

    function prevSlide() {
      console.log('trigger prevSlide');
      currentIndex = (currentIndex - 1 + items.length) % items.length;
      showSlide(currentIndex);
    }

    // 自動輪播
    let interval = setInterval(nextSlide, 5000);

    // 滑鼠懸停時暫停輪播
    const carousel = document.querySelector('.carousel');
    carousel?.addEventListener('mouseenter', () => clearInterval(interval));
    carousel?.addEventListener('mouseleave', () => {
      interval = setInterval(nextSlide, 5000);
    });

    // 按鈕事件
    prevBtn?.addEventListener('click', prevSlide);
    nextBtn?.addEventListener('click', nextSlide);
  }

  // 修改事件監聽方式
  document.addEventListener('DOMContentLoaded', setupCarousel);
  // document.addEventListener('astro:page-load', setupCarousel);
</script> 